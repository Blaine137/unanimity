[{"E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\index.js":"1","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\serviceWorker.js":"2","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\App.js":"3","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\redux\\configStore.js":"4","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\redux\\actions.js":"5","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\redux\\reducers.js":"6","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\containers\\Authentication\\Authentication.js":"7","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\ContactForm\\ContactForm.js":"8","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\landing\\Landing.js":"9","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\FAQ\\FAQ.js":"10","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\Nav\\Nav.js":"11","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\axios.js":"12","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\containers\\Messenger\\Messenger.js":"13","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\containers\\Authentication\\LoginForm\\LoginForm.js":"14","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\Alert\\Alert.js":"15","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\Sidebar\\Sidebar.js":"16","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\MainContent\\MainContent.js":"17","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\MainContent\\Input\\Input.js":"18","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\Sidebar\\addChatRoom\\addChatRoom.js":"19","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\MainContent\\Chatroom\\Chatroom.js":"20","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\MainContent\\Header\\Header.js":"21","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\MainContent\\Chatroom\\Message\\Message.js":"22","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\MainContent\\Header\\AccountSettings\\AccountSettings.js":"23","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\MainContent\\Header\\AccountSettings\\UpdatePwdForm\\UpdatePwdForm.js":"24","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\MainContent\\Header\\AccountSettings\\UpdateUsernameForm\\UpdateUsernameForm.js":"25"},{"size":617,"mtime":1604713096420,"results":"26","hashOfConfig":"27"},{"size":5226,"mtime":1604713096422,"results":"28","hashOfConfig":"27"},{"size":2363,"mtime":1607107575751,"results":"29","hashOfConfig":"27"},{"size":453,"mtime":1604713096421,"results":"30","hashOfConfig":"27"},{"size":1870,"mtime":1604713096421,"results":"31","hashOfConfig":"27"},{"size":2062,"mtime":1604713096422,"results":"32","hashOfConfig":"27"},{"size":11386,"mtime":1607113669031,"results":"33","hashOfConfig":"27"},{"size":3589,"mtime":1607107575752,"results":"34","hashOfConfig":"27"},{"size":1394,"mtime":1607130636138,"results":"35","hashOfConfig":"27"},{"size":2854,"mtime":1607107575753,"results":"36","hashOfConfig":"27"},{"size":888,"mtime":1607107575756,"results":"37","hashOfConfig":"27"},{"size":142,"mtime":1604713096397,"results":"38","hashOfConfig":"27"},{"size":28528,"mtime":1607113669032,"results":"39","hashOfConfig":"27"},{"size":1998,"mtime":1607129172640,"results":"40","hashOfConfig":"27"},{"size":1279,"mtime":1606960353433,"results":"41","hashOfConfig":"27"},{"size":9169,"mtime":1607130636138,"results":"42","hashOfConfig":"27"},{"size":1035,"mtime":1606841685189,"results":"43","hashOfConfig":"27"},{"size":2273,"mtime":1606962797566,"results":"44","hashOfConfig":"27"},{"size":1496,"mtime":1606965985407,"results":"45","hashOfConfig":"27"},{"size":3146,"mtime":1606960865078,"results":"46","hashOfConfig":"27"},{"size":6437,"mtime":1607113665179,"results":"47","hashOfConfig":"27"},{"size":995,"mtime":1606961036054,"results":"48","hashOfConfig":"27"},{"size":2629,"mtime":1606962065308,"results":"49","hashOfConfig":"27"},{"size":3990,"mtime":1607130636136,"results":"50","hashOfConfig":"27"},{"size":4010,"mtime":1607130636137,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"fnqqt1",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"111"},"E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\index.js",[],["112","113"],"E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\serviceWorker.js",[],"E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\App.js",[],"E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\redux\\configStore.js",[],"E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\redux\\actions.js",[],"E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\redux\\reducers.js",[],"E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\containers\\Authentication\\Authentication.js",["114"],"import React, { useState, useEffect, Fragment } from 'react';\r\nimport Messenger from '../Messenger/Messenger';\r\nimport LoginForm from './LoginForm/LoginForm';\r\nimport axios from '../../axios';\r\nimport DOMPurify from 'dompurify';\r\nimport Alert from '../../components/Alert/Alert';\r\nimport * as passwordHash from 'password-hash'; //import npm pass https://www.npmjs.com/package/password-hash\r\nimport { connect } from 'react-redux';\r\nimport { setAuthentication, setUserId, setUsername, setNotification } from '../../redux/actions';\r\nimport Nav from '../../components/Nav/Nav';\r\nimport { motion } from 'framer-motion';\r\n\r\nlet messenger = null; //messenger is either unanimity messenger(Messenger component ) or the log in page if not authenticated\r\n \r\nconst mapStateToProps = state => {\r\n    return {\r\n        authenticated: state.authentication.authenticated,\r\n        userId: state.authentication.userId,\r\n        username: state.authentication.username,\r\n        notification: state.messenger.notification,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    setAuthentication,\r\n    setUserId,\r\n    setUsername,\r\n    setNotification\r\n};\r\n\r\nlet Authentication = props => {\r\n    useEffect(() => {\r\n        props.setAuthentication(false);\r\n        props.setUserId(null);\r\n        props.setUsername(null);\r\n    }, []);\r\n\r\n    const [formSubmissions, setFormSubmissions] = useState(1);\r\n    const [waitTime, setWaitTime] = useState(null);\r\n    \r\n    //if the user has submitted the form more than three times. Make them wait ten seconds to resubmit and alert them to wait ten seconds.\r\n    //returns true if they should be allowed to submit the form. returns false if they are spamming the form.\r\n    const throttleFormSpam = () => {\r\n        setFormSubmissions(formSubmissions + 1);\r\n        if(formSubmissions >= 3) {      \r\n            if( waitTime === null ) {                                      \r\n                setWaitTime(Date.now());                         \r\n            }                       \r\n            let currentTime = Date.now();                      \r\n            if(currentTime >= (waitTime + 10000)) {                               \r\n                    setWaitTime(currentTime);                                       \r\n                    return true;  \r\n            } else {\r\n                props.setNotification([<Alert alertMessage=\"you must wait ten seconds before resubmitting the form.\" alertClose={ closeNotification }/>]);\r\n                return false;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const checkForNewUser = async (event, newUser, newPassword) => {    \r\n        event.preventDefault();\r\n        let newUserValue = newUser.value;\r\n        let newPasswordValue = newPassword.value;\r\n        let newUserID = null;\r\n        newUserValue = DOMPurify.sanitize(newUserValue);\r\n        newUserValue = newUserValue.replace(/[^\\w]/g,'');\r\n        newUserValue = newUserValue.toLowerCase();\r\n        newPasswordValue = DOMPurify.sanitize(newPasswordValue);\r\n        newPasswordValue = newPasswordValue.replace(/[^\\w^!?$]/g,'');\r\n        newUserID = DOMPurify.sanitize(newUserID);\r\n        newUserID = newUserID.replace(/[^\\w]/g,'');\r\n        \r\n        if(throttleFormSpam()) {\r\n            //username a valid length\r\n            if(newUserValue.length > 10 || newPasswordValue.length > 20) {\r\n                props.setNotification([<Alert alertMessage=\"Username must be less than 10 characters and password must be less than 20.\" alertClose={ closeNotification }/>]);\r\n            } else if(!newUserValue || !newPasswordValue || newUserValue < 5 || newPasswordValue < 5) {\r\n                props.setNotification([<Alert alertMessage=\"Username and password must be 5 characters long and only contain alphabetical and numerical values.\" alertClose={ closeNotification }/>])\r\n            } else {\r\n                let getUserId = async () => {\r\n                    try {\r\n                        let resID = await axios.get('userIDByUsername/nextUserID.json');\r\n                        newUserID = resID.data;\r\n                        //try to get the username they are wanting to register as\r\n                        let resName = await axios.get('userIDByUsername/' + newUserValue + '.json');\r\n                        if(!resName.data) {\r\n                            //create user if the username is not taken\r\n                            setNewUser(newUserValue, newPasswordValue, newUserID); \r\n                        } else {\r\n                            props.setNotification([<Alert alertMessage=\"Username is already taken!\" alertClose={ closeNotification }/>]);\r\n                        }\r\n                    } catch(error) {\r\n                        return 300;\r\n                    }\r\n                }\r\n                getUserId();\r\n            }\r\n        }\r\n    }\r\n\r\n    //sets users in db\r\n    const setNewUser = async (newUser, newPassword, newUserID) => {\r\n        newUser = DOMPurify.sanitize(newUser);\r\n        newUser = newUser.replace(/[^\\w]/g,'');\r\n        newPassword = DOMPurify.sanitize(newPassword);\r\n        newPassword = newPassword.replace(/[^\\w^!?$]/g,'');\r\n        newUserID = DOMPurify.sanitize( newUserID ); \r\n        newUserID = newUserID.replace(/[^\\w!?$]/g,'');      \r\n        let newCompleteUser = {\r\n            password: passwordHash.generate(newPassword),\r\n            userID: newUserID,\r\n            userName: newUser\r\n        };\r\n        //sets new users in users\r\n        axios.put('users/u' + newUserID + '.json' , newCompleteUser);  \r\n\r\n        //-----adds user to userIDByUsername-----\r\n\r\n        let userIDByUsername = {};\r\n        //set property of object name to newUser and then set the value of the property to newUserID\r\n        userIDByUsername[newUser] = newUserID;\r\n        //axios get old usernames and ID\r\n        try {\r\n            let oldUserIDByUsername = await axios.get('userIDByUsername.json');\r\n            oldUserIDByUsername = oldUserIDByUsername.data\r\n            let combinedUserIDByUsername = { ...oldUserIDByUsername, ...userIDByUsername };\r\n            let updatedNextUserID = parseInt(newUserID);\r\n            updatedNextUserID++;\r\n            //sets nextUserId to correct ID\r\n            combinedUserIDByUsername.nextUserID = updatedNextUserID;\r\n            //update db to latest version\r\n            axios.put('userIDByUsername.json', combinedUserIDByUsername);\r\n        } catch(error) {\r\n            return 300;\r\n        }\r\n        //-----end of adds user to userIDByUsername-----\r\n\r\n        //-----start add to usersChatRooms in DB-----\r\n            //ucr stands for UserChatRoom\r\n            let newUCR = {\r\n                chatRooms: [],\r\n                userID: newUserID\r\n            }\r\n            axios.put('usersChatRooms/ucr' + newUserID + '.json', newUCR);\r\n        //-----end of add to usersChatRooms in DB-----\r\n\r\n        //inform user that account was created\r\n        let accountMessage = DOMPurify.sanitize(\"Your account has been created! Username: '\" + newUser + \"'\");\r\n        accountMessage = accountMessage.replace(/[^\\w\\s!?$]/g,'');\r\n        props.setNotification([<Alert alertMessage={ accountMessage } alertClose={ closeNotification }/>]);\r\n    }\r\n    \r\n    const checkName = async (authValues, userNameElement, passwordElement) => {\r\n        if(authValues) { authValues.preventDefault(); }\r\n        let username = userNameElement.value || userNameElement;\r\n        let password = passwordElement.value || passwordElement;\r\n        let userID = null;\r\n        username = DOMPurify.sanitize(username);\r\n        username = username.replace(/[^\\w]/g,'');\r\n        password = DOMPurify.sanitize(password);\r\n        password = password.replace(/[^\\w^!?$]/g,'');\r\n\r\n        if(username && throttleFormSpam()) {\r\n            //make usernames non-caseSensitive\r\n            username = username.toLowerCase();\r\n            //get userId by username \r\n            try {\r\n                userID = await axios.get('userIDByUsername/' + username + '.json');\r\n                userID = userID.data;\r\n                if(!userID) {\r\n                    props.setNotification([<Alert alertMessage=\"Incorrect username or password.\" alertClose={ closeNotification }/>]);\r\n                } else {\r\n                    //now that we know the username is exist and we have the userID for that username check the password\r\n                    if(password) { checkPwdForUserID(username, userID, password); }\r\n                }\r\n            } catch(error) {\r\n                return 300;\r\n            }            \r\n        }\r\n    }\r\n\r\n    const checkPwdForUserID = async (checkUsername, checkUserID, checkPassword) => {\r\n       checkUsername = DOMPurify.sanitize(checkUsername);\r\n       checkUsername = checkUsername.replace(/[^\\w]/g,'');\r\n       checkUserID = DOMPurify.sanitize(checkUserID);\r\n       checkUserID = checkUserID.replace(/[^\\w]/g,'');\r\n       checkPassword = DOMPurify.sanitize(checkPassword);\r\n       checkPassword = checkPassword.replace(/[^\\w^!?$]/g,'');\r\n        try {\r\n            let hashedPassword = await axios.get('users/u' + checkUserID + '/password.json');\r\n            hashedPassword = hashedPassword.data;\r\n            if(passwordHash.verify(checkPassword, hashedPassword)) {    \r\n                props.setUserId(checkUserID);\r\n                props.setUsername(checkUsername); \r\n                setTimeout(() => { props.setAuthentication(true); } ,200)                           \r\n            } else {\r\n                //pwd was wrong so set authenticated to false to make sure it failed. and set username and userID to null\r\n                props.setUserId(null);\r\n                props.setUsername(null);\r\n                props.setAuthentication(false);\r\n                props.setNotification([<Alert alertMessage=\"Incorrect username or password.\" alertClose={ closeNotification }/>]);\r\n            }\r\n        } catch {\r\n            return 300;\r\n        }  \r\n    }\r\n\r\n    const closeNotification = () => props.setNotification(null);\r\n    \r\n    const ifAuthenticated = () => {\r\n        if(props.authenticated) {\r\n            messenger = <motion.div\r\n            initial=\"initial\"\r\n            animate=\"in\"\r\n            exit=\"out\"\r\n            variants={props.pageVariants}\r\n            transition={props.pageTransition}> \r\n                <Messenger/> \r\n            </motion.div>;\r\n        } else {\r\n            messenger = <main>\r\n                            <motion.div\r\n                                initial=\"initial\"\r\n                                animate=\"in\"\r\n                                exit=\"out\"\r\n                                variants={props.pageVariants}\r\n                                transition={props.pageTransition}\r\n                            >\r\n                                <Nav/>\r\n                                <LoginForm checkName={ checkName } checkForNewUser={ checkForNewUser}/>\r\n                            </motion.div>\r\n                        </main>;              \r\n        }\r\n    }\r\n    ifAuthenticated();\r\n\r\n    return(\r\n        <Fragment>                                 \r\n                { props.notification }\r\n                { /* messenger is set by ifAuthenticated(). is either the Messenger component or the login screen*/}\r\n                { messenger }\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Authentication);","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\ContactForm\\ContactForm.js",["115","116"],"import React from 'react';\r\nimport styles from './ContactForm.module.scss';\r\nimport Alert from '../Alert/Alert';\r\nimport DOMPurify from 'dompurify';\r\nimport { connect } from 'react-redux';\r\nimport { setNotification } from '../../redux/actions';\r\nimport Nav from '../Nav/Nav.js';\r\nimport {motion} from 'framer-motion';\r\n\r\nconst mapStateToProps = state => ({ notification: state.messenger.notification });\r\n\r\nconst mapDispatchToProps = { setNotification };\r\n\r\nlet ContactForm = props => {\r\n    let closeNotification = () => props.setNotification(null);      \r\n    return(     \r\n        <main >\r\n            <motion.div\r\n             initial=\"initial\"\r\n             animate=\"in\"\r\n             exit=\"out\"\r\n             variants={props.pageVariants}\r\n             transition={props.pageTransition}>\r\n                <Nav />\r\n                { props.notification }\r\n                <img src=\"../../../unanimity-large-logo.svg\" alt=\"Unanimity Messenger Logo. Harmony through words.\"/>                         \r\n                <form className={ styles.form } action=\"/\"> \r\n                    <fieldset>\r\n                        <legend>Let's get to know each other!</legend>                                 \r\n                        <label htmlFor=\"Email\" >Your Email Address</label>\r\n                        <input aria-label=\"Email Text input\" type=\"Email\" id=\"Email\" name=\"Email\" className={ styles.input } required/> \r\n                        <label htmlFor=\"Comments\">How may we help you?</label>\r\n                        <textarea aria-label=\"Enter your comment here for unanimity contact form.\" id=\"Comment\" name=\"Comment\" rows=\"12\" placeholder=\"Enter your comment here.\" required></textarea>\r\n                        <input aria-label=\"Submit contact form to Unanimity\" type=\"submit\" value=\"Submit\" className={ styles.submit } onClick={ e => {\r\n                                // sanitize and check for vailid email format. then alert the user with appropriate info\r\n                                e.preventDefault();\r\n                                let email = document.getElementById('Email').value;\r\n                                let comment = document.getElementById('Comment').value;\r\n                                email = DOMPurify.sanitize(email) ;\r\n                                comment = DOMPurify.sanitize(comment);\r\n                                //only allow words numbers ! ? $ @ .                             \r\n                                email = email.replace(/[^\\w^0-9^!?$@.]/g, '');\r\n                                comment = comment.replace(/[^\\w^0-9^!?$@.]/g, '');\r\n                                //validate email format\r\n                                if(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email) && email && comment) {\r\n                                    let message = \"Thank you for contacting Unanimity, your form will be reviewed within 24 hours!\";\r\n                                    props.setNotification([<Alert alertMessage={ message } alertClose={ closeNotification }/>]);\r\n                                } else {\r\n                                    props.setNotification([<Alert alertMessage=\"Please enter a valid email address and comment\" alertClose={ closeNotification }/>]);\r\n                                }                                       \r\n                        } }/> \r\n                    </fieldset>                       \r\n                </form> \r\n            </motion.div>                     \r\n        </main>\r\n    );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\landing\\Landing.js",[],"E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\FAQ\\FAQ.js",["117"],"import React from 'react';\r\nimport Nav from '../Nav/Nav';\r\nimport styles from './FAQ.module.scss';\r\nimport {motion} from 'framer-motion';\r\n\r\nconst FAQ = props => {\r\n    return(\r\n        <>\r\n            <Nav/>\r\n            <main>\r\n                <motion.div\r\n                initial=\"initial\"\r\n                animate=\"in\"\r\n                exit=\"out\"\r\n                variants={props.pageVariants}\r\n                transition={props.pageTransition}>\r\n                    <img src=\"../../../unanimity-large-logo.svg\" alt=\"Unanimity Messenger Logo. Harmony through words.\"/>\r\n                    <h1>Frequently asked questions</h1>\r\n                    <dl>\r\n                        <dt className={styles.question}>How do I add a chatroom?</dt>\r\n                        <dd>Once logged in, click on the green cross in the top left of the sidebar. Enter the username of who you want to chat with and chat away!</dd>\r\n                        <dt className={styles.question}>How do I delete a chatroom?</dt>\r\n                        <dd>Login and click on the \"X\" next to the chatroom you would click to delete.</dd>\r\n                        <dt className={styles.question}>How do I send a message?</dt>\r\n                        <dd>Once logged in, click on a chatroom of your choice, then click in the white box on the bottom of the screen. Type your message then press the enter key on the keyboard!</dd>\r\n                        <dt className={styles.question}>How do I send an emoji in a message?</dt>\r\n                        <dd>Simply type out a colon \":\" followed by the emoji name you would like to use followed by another colon \":\". Example \":smile:\". <a href=\"https://github.com/tommoor/react-emoji-render/blob/HEAD/data/aliases.js\" target=\"_blank\" rel=\"noopener\">View all emojis!</a></dd>\r\n                        <dt className={styles.question}>How do I change the color scheme?</dt>\r\n                        <dd>Once logged in, in the top right corner click on the three dots. This will open a option menu, where their will be a option titled theme. Click the switch beside theme to change the color scheme. </dd>\r\n                        <dt className={styles.question}>How do I change my username?</dt>\r\n                        <dd>Login and click on the options button (three dots) in the top right corner. Click on \"update username\" to enter your new username, however, you must enter your current password!</dd>\r\n                        <dt className={styles.question}>How do I change my password?</dt>\r\n                        <dd>Login and click on the options button (three dots) in the top right corner. Click on \"update password\" to enter your current password and your new password twice to confirm it!</dd>\r\n                    </dl>\r\n                </motion.div>\r\n            </main>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FAQ;","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\Nav\\Nav.js",[],"E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\axios.js",[],"E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\containers\\Messenger\\Messenger.js",["118","119"],"import React, { Fragment, useEffect, useState } from 'react';\r\nimport Sidebar from '../../components/Sidebar/Sidebar';\r\nimport MainContent from '../../components/MainContent/MainContent';\r\nimport axios from '../../axios'; //custom axios instance with DB base Url added\r\nimport styles from './Messenger.module.scss';\r\nimport DOMPurify from 'dompurify';\r\nimport Alert from '../../components/Alert/Alert';\r\nimport { setAuthentication, setUserId, setUsername, setShowSidebar, setCurrentChatRoomID, setCurrentChatRoom, setCurrentChatRoomName, setUsersChatRoomsID, setNotification } from '../../redux/actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        authenticated: state.authentication.authenticated,\r\n        userId: state.authentication.userId,\r\n        username: state.authentication.username,\r\n        showSidebar: state.messenger.showSidebar,\r\n        currentChatRoomID: state.messenger.currentChatRoomID,\r\n        currentChatRoom: state.messenger.currentChatRoom,\r\n        usersChatRoomsID: state.messenger.usersChatRoomsID,\r\n        currentChatRoomName: state.messenger.currentChatRoomName,\r\n        notification: state.messenger.notification,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    setAuthentication,\r\n    setUserId,\r\n    setUsername,\r\n    setShowSidebar,\r\n    setCurrentChatRoomID,\r\n    setCurrentChatRoom,\r\n    setCurrentChatRoomName,\r\n    setUsersChatRoomsID,\r\n    setNotification\r\n};\r\n\r\nconst Messenger = props => {\r\n    const [sidebarInlineStyles, setSideStyles] = useState({display: 'block'});\r\n \r\n    useEffect(() => {\r\n        //updates the chatroom every half a second so users can see new messages\r\n        const interval = setInterval(() => { updateChatRoom(); }, 500);\r\n        //on load of messenger make sure the user is logged in.\r\n        handleAuthentication();\r\n        //get and set state with an array of all the chatroom's the authenticated user is in\r\n        if(props.userId) { handleUsersChatRoomsID(); }\r\n\r\n        return () => {\r\n             //removes the interval component did mount/ updateChatRoom.\r\n            clearInterval(interval);\r\n        };\r\n    });\r\n\r\n    const closeNotification = () => props.setNotification(null);\r\n\r\n    const handleNotification = message => {\r\n        let sanitizedMessage = DOMPurify.sanitize(message);\r\n        //only allows words, spaces, !, ?, $\r\n        sanitizedMessage = sanitizedMessage.replace(/[^\\w\\s!?$]/g,'');\r\n        let alertComponent=<Alert alertMessage={ sanitizedMessage } alertClose={ closeNotification }/>;\r\n        props.setNotification(alertComponent);\r\n    }\r\n\r\n    //check that the user is logged in and if passed true for logout logs the user out\r\n    const handleAuthentication = logout => {\r\n        //on login make sure all required values are set. If one value is not set force logout.\r\n        if(logout === null || logout === undefined) {\r\n            if(!props.username || !props.authenticated || !props.userId) {\r\n                props.setAuthentication(false);\r\n                props.setUserId(null);\r\n                props.setUsername(null);\r\n                props.setUsersChatRoomsID(null);\r\n            }\r\n        } else { \r\n            /* Logout */\r\n            props.setAuthentication(false);\r\n            props.setUserId(null);\r\n            props.setUsername(null);\r\n            props.setUsersChatRoomsID(null);\r\n        }\r\n    }\r\n\r\n    //onClick of hamburger/X. show/Hide the sidebar\r\n    const handleShowSidebar = closeOnly => {\r\n        //the x in the sidebar for mobile was clicked then close only == true\r\n        if(closeOnly === true) {\r\n            props.setShowSidebar(false);\r\n            //wait for animiation to complete.\r\n            setTimeout(() => setSideStyles({ display: 'none'}), 1000);\r\n        } else {\r\n            if(props.showSidebar) {\r\n                props.setShowSidebar(false);\r\n                //wait for animiation to complete.\r\n                setTimeout(() => setSideStyles({ display: 'none'}), 1000);\r\n            } else {\r\n                setSideStyles({ display: 'block'})\r\n                //wait for the animation\r\n                setTimeout(() => props.setShowSidebar(true), 150);\r\n            }\r\n        }\r\n    }\r\n\r\n    //once auth user sends message. Validates Message, add to the DB.\r\n    const newMessage = newMessage => {\r\n        //messageChatRoom = selected chatroom object with all the messages\r\n        let messageChatRoom = Object.entries(props.currentChatRoom);\r\n        let authenticaedUserMessageOld = [];\r\n        let authenticaedUserMessageCombined = [];\r\n        //nextMsgNum is the number of all the mesages sent by auth user and recipent plus one.\r\n        let nextMsgNum = null;\r\n        if(newMessage.length > 0 && newMessage.length < 2000 && props.currentChatRoom != null) {\r\n            Object.entries(props.currentChatRoom).forEach(user => {\r\n                if(user[0] === (\"u\" + props.userId)) {\r\n                    //in this if user[0] is \"u\" + auth userID. user[1] is auth users messages\r\n                    authenticaedUserMessageOld = user[1] ;\r\n                } else if(user[0] === \"nextMsgNum\") {\r\n                    nextMsgNum = user[1];\r\n                }\r\n            });\r\n            authenticaedUserMessageCombined = [...Object.values(authenticaedUserMessageOld)];\r\n            authenticaedUserMessageCombined[nextMsgNum] = DOMPurify.sanitize(newMessage);\r\n            authenticaedUserMessageCombined[nextMsgNum] = authenticaedUserMessageCombined[nextMsgNum].replace(/[^\\w\\s!?$:&,\\-\\(\\)]/g,'');\r\n            nextMsgNum++; \r\n            messageChatRoom.forEach(property => {\r\n                if(property[0] === (\"u\" + props.userId)) {\r\n                    property[1] = authenticaedUserMessageCombined;\r\n                } else if(property[0] === \"nextMsgNum\") {\r\n                    property[1] = nextMsgNum;\r\n                }\r\n            });\r\n            messageChatRoom = Object.fromEntries(messageChatRoom);\r\n            axios.put(\"chatRooms/\" + props.currentChatRoomID + \".json\", messageChatRoom);\r\n            //update our current chatRoom\r\n            props.setCurrentChatRoom(messageChatRoom);\r\n        }\r\n    }\r\n\r\n    /* checks for new messages/new chatrooms from other users */\r\n    const updateChatRoom = () => {\r\n        if(props.currentChatRoomID && props.currentChatRoom !== 'Unanimity') {\r\n            let oldID = props.currentChatRoomID;\r\n            //get the messages for the current chatroom        \r\n            axios.get('chatRooms/' + oldID + '.json').then(newChatRoom => {  \r\n                //convert object to string the see if strings equal to see if we need to update \r\n                if(JSON.stringify(props.currentChatRoom) !== JSON.stringify(newChatRoom.data) && oldID === props.currentChatRoomID) {\r\n                    props.setCurrentChatRoom(newChatRoom.data);\r\n                }\r\n            });\r\n        }\r\n        //check for new chatroom's in the db\r\n        handleUsersChatRoomsID();\r\n        if(props.authenticated === false) { props.authLogout(); }\r\n    }\r\n\r\n    //gets array of chatRoomsID auth user is in. if its different then our current UsersChatRoomsID then update state. called by mount and update\r\n    const handleUsersChatRoomsID = () => {\r\n        if(props.userId) {\r\n            axios.get('usersChatRooms/ucr' + props.userId + '/chatRooms.json').then(\r\n                newUsersChatRoomsID => {\r\n                    //convert array to object. then stringify object. if strings dont eqaul chatroom has been added or delted. then update.\r\n                    if(JSON.stringify(Object.assign({}, newUsersChatRoomsID.data)) !== JSON.stringify(Object.assign({}, props.usersChatRoomsID))) {\r\n                         props.setUsersChatRoomsID(newUsersChatRoomsID.data); \r\n                    }\r\n                }\r\n            );\r\n        }     \r\n    }\r\n\r\n    //gets selected chatRoom users(cru). gets name of recipient. then sets currentChatRoomName to recipients name. called by setCurrentChatRoom\r\n    const handleCurrentChatRoomName = ChatRoomID => {   \r\n        if(ChatRoomID) {\r\n            axios.get('chatRoomsUsers/cru' + ChatRoomID + '/users.json').then(\r\n                e => {\r\n                    if(e.data) {\r\n                        let authUserIndex = e.data.indexOf(props.userId);\r\n                        e.data.splice(authUserIndex, 1);                    \r\n                        axios.get('users/u' + e.data[0] + '/userName.json').then(e => {\r\n                            props.setCurrentChatRoomName(e.data);\r\n                        });                   \r\n                    }\r\n                    else {\r\n                        props.setCurrentChatRoomName('Unanimity');\r\n                    }\r\n                }\r\n            ); \r\n        }\r\n    }\r\n\r\n    //called by sidebar on click of a chatroom. calls functions to set chatRoom name and set state for CurrentChatRoomID and CurrentChatRoom\r\n    const handleCurrentChatRoom = setChatRoomID => { \r\n        handleCurrentChatRoomName(setChatRoomID);\r\n        axios.get('chatRooms/' + setChatRoomID + '/.json').then(\r\n            chatRoomMsg => {  \r\n                props.setCurrentChatRoomID(setChatRoomID);       \r\n                props.setCurrentChatRoom(chatRoomMsg.data);\r\n            }\r\n        );\r\n    }\r\n\r\n    const newChatRoom = (event, recipentName) => {\r\n        recipentName = DOMPurify.sanitize(recipentName);\r\n        recipentName = recipentName.replace(/[^\\w^!?$]/g,'');\r\n        recipentName = recipentName.toLowerCase();   \r\n        let recipentID = null;\r\n        let newChatRoomID = null;\r\n        //updatedChatRoomID is the id that comes after this newChatRoom Id. used to update the db.\r\n        let updatedChatRoomID = null;\r\n        let newChatRoomObject = {};\r\n        //will be the new updated userChatRooms/ucr+userID/chatRooms.json for the authenticated user. will equal array of chatRoomsID that the user is apart of\r\n        let updatedAuthUserChatRoomsID = [];\r\n        let updatedRecipientUserChatRoomsID = [];\r\n        //object that will be inserted in the newly created ChatRoomUsers/newchatRoomid.json.\r\n        let newChatRoomUsersObject = {};\r\n        \r\n        //adds references in db for a new chatroom.\r\n        let addChatRoomReferances = () => {\r\n            //if recipentID was set. the user they are trying to start a convo with exists.\r\n            if(recipentID !== null) {\r\n                newChatRoomObject = { nextMsgNum: 2, };\r\n                //adds u+userid to the chatroom object with u+userID as the property name. then sets the value to an array with a welcome message.\r\n                newChatRoomObject[\"u\" + props.userId] = [(props.username + \" has joined the chat!\")];\r\n                newChatRoomObject[\"u\" + recipentID] = [ null, (recipentName + \" has joined the chat!\")];\r\n                axios.get('chatRooms/nextChatRoomID.json').then(\r\n                    nextChatRoomId => {\r\n                        //--------- start create the chatroom in chatRooms ---------\r\n                        newChatRoomID = nextChatRoomId.data;\r\n                        if(newChatRoomID) {\r\n                            axios.put('chatRooms/' + newChatRoomID + '.json', newChatRoomObject).catch(\r\n                                error => {\r\n                                    props.setNotification([<Alert alertMessage = \"failed to add chat room to data base. Please try agin.\" alertClose = { closeNotification }/>]);   \r\n                                }\r\n                            );\r\n                            updatedChatRoomID = parseInt(newChatRoomID);\r\n                            //increment the ID to find the Id after newID\r\n                            updatedChatRoomID++;\r\n                            axios.put('chatRooms/nextChatRoomID.json', updatedChatRoomID).catch(\r\n                                error => { console.log(\"failed to update the nextChatRoomID in the DB \", error); }\r\n                            );\r\n                        }\r\n                        else {      \r\n                            props.setNotification([<Alert alertMessage=\"Could not determine the chat room id. Please try agin.\" alertClose={ closeNotification }/>]);\r\n                        }\r\n                        //--------- end create the chatroom in chatRooms ---------\r\n\r\n\r\n                        // --------- start update usersChatRooms for authenticated user and recipent ---------\r\n                        //they have other chatRooms\r\n                      \r\n                        if(props.usersChatRoomsID && props.usersChatRoomsID.length !== 0) {\r\n                            //gets latest data. this prevents from add chatroom adding chatroom references to deleted chatroom\r\n                            axios.get('usersChatRooms/ucr' + props.userId + '/chatRooms.json').then(\r\n                                e => {\r\n                                    handleUsersChatRoomsID();\r\n                                    updatedAuthUserChatRoomsID = e.data;\r\n                                    updatedAuthUserChatRoomsID.push(newChatRoomID);\r\n                                    let chatRooms = updatedAuthUserChatRoomsID;\r\n                                    axios.put('usersChatRooms/ucr' + props.userId + '.json', { chatRooms }).catch(\r\n                                        error => {\r\n                                            let errorMessage = \"Error. failed to update Authenticated usersChatRooms \" + DOMPurify.sanitize(error);\r\n                                            props.setNotification([<Alert alertMessage={ errorMessage } alertClose={ closeNotification } />]);\r\n                                        }\r\n                                    ); \r\n                                }\r\n                            );\r\n                        } else {\r\n                            //add their first chatroom\r\n                            updatedAuthUserChatRoomsID = [];\r\n                            updatedAuthUserChatRoomsID.push(newChatRoomID);\r\n                            let chatRooms = updatedAuthUserChatRoomsID;\r\n                            axios.put('usersChatRooms/ucr' + props.userId + '.json', { chatRooms }).catch(\r\n                                error => {                              \r\n                                    let errorMessage = \"Error. failed to update Authenticated usersChatRooms \" + DOMPurify.sanitize(error); \r\n                                    props.setNotification([<Alert alertMessage={ errorMessage } alertClose={ closeNotification }/>]);\r\n                                }\r\n                            );\r\n                        }\r\n\r\n                        axios.get('usersChatRooms/ucr' + recipentID + '/chatRooms.json').then(\r\n                            recipientsChatRoom => {\r\n                                if(recipientsChatRoom.data) {\r\n                                    updatedRecipientUserChatRoomsID = recipientsChatRoom.data;\r\n                                } else {\r\n                                    updatedRecipientUserChatRoomsID = [];\r\n                                }\r\n                                updatedRecipientUserChatRoomsID.push(newChatRoomID);\r\n                                let chatRooms = updatedRecipientUserChatRoomsID;\r\n                                axios.put('usersChatRooms/ucr' + recipentID + '.json', { chatRooms }).then(\r\n                                    () => {\r\n                                        //auth and recipent have new chatroom so update auth user sidebar with new chatroom \r\n                                        handleUsersChatRoomsID();     \r\n                                    }\r\n                                ).catch(\r\n                                    error => {                                     \r\n                                        let errorMessage = \"Error. failed to update Recipient usersChatRooms \" + DOMPurify.sanitize(error);\r\n                                        props.setNotification([<Alert alertMessage={ errorMessage } alertClose={ closeNotification }/>]);\r\n                                    }\r\n                                );\r\n                            } \r\n                        ) \r\n                        // --------- end of userChatRooms update ---------\r\n\r\n\r\n                        // --------- start of update chatRoomUser --------- \r\n                        newChatRoomUsersObject = {\r\n                            chatRoomID: newChatRoomID,\r\n                            users: [props.userId, recipentID]\r\n                        }\r\n                        axios.put('chatRoomsUsers/cru' + newChatRoomID + '.json', newChatRoomUsersObject).catch(\r\n                            error => {\r\n                                let errorMessage = \"Error. Failed to add ChatRoom to ChatRoomUsers \" + DOMPurify.sanitize(error); \r\n                                props.setNotification([<Alert alertMessage={ errorMessage } alertClose={ closeNotification }/>]);\r\n                            }\r\n                        );\r\n                        // --------- end of update chatRoomUsers ---------\r\n                    } \r\n                ).catch(\r\n                    //if error occurred in axios get nextChatRoomID from chatRooms/nextChatRoomID.json\r\n                    error => {\r\n                        let errorMessage = \"Error occurred while trying to set ChatRoomID. Please try agin. \" + DOMPurify.sanitize(error); \r\n                        props.setNotification([<Alert alertMessage={ errorMessage } alertClose={ closeNotification }/>]);\r\n                    }\r\n                );\r\n            }\r\n        }\r\n\r\n        if(event) { event.preventDefault(); }\r\n        //--------- start check if recipients name exists. set recipientsId if it exists ---------\r\n        if(recipentName !== null && recipentName !== props.username && recipentName) {\r\n            axios.get('userIDByUsername/' + recipentName + '.json').then(\r\n                response => {\r\n                    recipentID = response.data;\r\n                    if(recipentID === null) {     \r\n                        props.setNotification([<Alert alertMessage = \"User not found! 308\" alertClose = { closeNotification } />]);\r\n                    }\r\n\r\n                    // --------- Check to see if auth user already has a chatroom with recipent ---------\r\n                    if(recipentID !== null) {\r\n                        if(props.usersChatRoomsID !== null && props.usersChatRoomsID.length !== 0) {\r\n                            \r\n                            props.usersChatRoomsID.forEach(chatRoomID => {\r\n                                //for the current chatRoom get the users in that chatroom\r\n                                axios.get('chatRoomsUsers/cru' + chatRoomID + '.json').then(\r\n                                    chatRoomUsers => {\r\n                                        if(chatRoomUsers) {\r\n                                            let hasChatRoomWithRecipent = false;\r\n                                            // see if auth user has a chatroom with recipent already\r\n                                            for(let i = 0; i < Object.values(chatRoomUsers.data.users).length; i++) {\r\n                                                let userID = chatRoomUsers.data.users[i];\r\n                                                if(recipentID === userID) {             \r\n                                                    props.setNotification([<Alert alertMessage=\"You already have a chatroom with this user.\" alertClose={ closeNotification }/>]);\r\n                                                    hasChatRoomWithRecipent = true;\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                            //if the auth user dose not have a chatroom with the recipent add the chatroom\r\n                                            if(recipentID !== null && hasChatRoomWithRecipent === false) {\r\n                                                addChatRoomReferances();\r\n                                            }\r\n                                        }\r\n                                    });\r\n                            });\r\n                        } else {\r\n                            /* no chatroom for the recipient to be in so just add the chatroom */\r\n                            addChatRoomReferances();\r\n                        }\r\n                    }\r\n                }\r\n            ).catch(\r\n                error => {\r\n                    props.setNotification([<Alert alertMessage=\"User not found! 366\" alertClose={ closeNotification }/>]);\r\n                }\r\n            );\r\n        } else {\r\n            props.setNotification([<Alert alertMessage=\"Recipent\\'s name is required and can\\'t be your own name!\" alertClose={ closeNotification }/>]);\r\n        }\r\n        // --------- end of check recipent name ---------\r\n    }\r\n\r\n    const removeChatRoom = removeChatRoomID => {\r\n        //will equal all the users ID that are in the chatroom and need the chatroom id removed from userChatRooms\r\n        let removeChatRoomUsers = [];\r\n        //index of the chatRoom we need to remove from userChatRoom ( ucr )\r\n        let ucrIndex = null;\r\n        let empty = {};\r\n        if(removeChatRoomID !== null) {\r\n            //get the chatRoomUsers ID so that we can use it to remove the chatRoom from usersChatRoom.\r\n            axios.get('chatRoomsUsers/cru' + removeChatRoomID + '/users.json').then(\r\n                chatRoom => {\r\n                    if(chatRoom.data !== null) {\r\n                        removeChatRoomUsers = chatRoom.data;\r\n                        // -------- start remove the chatRoom from the ChatRoomUsers --------\r\n                        //deletes data by setting it equal to an empty object. firebase then automatically removes empty objects\r\n                        axios.put('chatRoomsUsers/cru' + removeChatRoomID + '.json', empty).then(() => {\r\n                            if(props.currentChatRoomID === removeChatRoomID) {\r\n                                //set the current chatroom to Unanimity instead of the chatroom that dose not exist\r\n                                props.setCurrentChatRoomName('Unanimity');\r\n                            }\r\n                        }).catch(e => { console.log(\"error overriding/deleting chatRoomUsers for \" + removeChatRoomID + \"axios error: \" + e) });\r\n                        // -------- end of remove the chatRoom from the chatRoomUsers --------\r\n\r\n\r\n                        // -------- start of remove the chatRoom from usersChatRooms for the ID of removeChatRoomUsers --------\r\n                        if(removeChatRoomUsers) {\r\n                            removeChatRoomUsers.forEach(user => {\r\n                                //get all of the users chatroom's for a specific user\r\n                                axios.get('usersChatRooms/ucr' + user + '/chatRooms.json').then(\r\n                                    userChatRoomIds => {                                  \r\n                                        userChatRoomIds.data = Object.values(userChatRoomIds.data);                                   \r\n                                        ucrIndex = userChatRoomIds.data.indexOf(removeChatRoomID);                                  \r\n                                        //0 is a valid index but zero equals false by default \r\n                                        if(ucrIndex || ucrIndex === 0) {                                 \r\n                                            userChatRoomIds.data.splice(ucrIndex, 1);                                     \r\n                                            if(Object.values(userChatRoomIds.data).length === 0) {                                               \r\n                                                //User has only one chatroom. db requires object to be passed. cant not pass null so we pass empty object. which firebase auto deletes          \r\n                                                axios.put('usersChatRooms/ucr' + user + '/chatRooms.json', empty).then(\r\n                                                    () => {\r\n                                                        //causes sidebar to update\r\n                                                        handleUsersChatRoomsID(); \r\n                                                    }\r\n                                                ).catch(error => { console.log(error); });\r\n                                            } else {                                      \r\n                                                let chatRooms = userChatRoomIds.data;\r\n                                                axios.put('usersChatRooms/ucr' + user + '.json', { chatRooms }).then(\r\n                                                    () => {\r\n                                                        //causes sidebar to update\r\n                                                        handleUsersChatRoomsID();\r\n                                                    }\r\n                                                ).catch(error => { console.log(error); });\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                ).catch(e => console.log(e) );\r\n                            });\r\n                        }\r\n                        // -------- end of remove the chatRoom from usersChatRooms for the ID of removeChatRoomUsers --------\r\n\r\n\r\n                        // -------- start of remove chatRoom from chatRooms -------- \r\n                        //deletes data by setting it to empty object. then firebase removes it completely\r\n                        axios.put('chatRooms/' + removeChatRoomID + '.json', empty);\r\n                        // -------- end of remove chatRoom from chatRooms -------- \r\n                    }\r\n                }\r\n            ).catch(\r\n                 error => {\r\n                    props.setNotification([<Alert alertMessage=\"Could not find Chatroom that you requested to be removed.\" alertClose={ closeNotification }/>]);\r\n                }\r\n            );\r\n        }\r\n        else {\r\n            console.log(\"removeChatRoomID was null in removeChatRoom function. function was canceled.\");\r\n        }\r\n    }\r\n\r\n    let mainContentInlineStyles = {}; \r\n    //sidebar closed make main content (the chatRoom area) expand entire width\r\n    if(!props.showSidebar) {\r\n        mainContentInlineStyles = {\r\n            transform: 'translateX( -20vw )',\r\n            width: '100vw',\r\n            height: '100vh',\r\n        };\r\n    }\r\n    //prevents sidebar from erring out by returning an empty array instead of null or undefined.\r\n    let sidebarusersChatRoomsID;\r\n    if(props.usersChatRoomsID !== null) {\r\n        sidebarusersChatRoomsID = props.usersChatRoomsID;\r\n    } else {\r\n        sidebarusersChatRoomsID = [];\r\n    }\r\n    return(\r\n        <Fragment>\r\n            { props.notification }\r\n            <div className={ styles.layout }>\r\n                <div className={ styles.sidebarGrid } style={ sidebarInlineStyles }>\r\n                    <Sidebar usersChatRoomsID={ sidebarusersChatRoomsID }\r\n                        userID={ props.userId }\r\n                        setCurrentChatRoomID = { handleCurrentChatRoom }\r\n                        showSidebar={ props.showSidebar }\r\n                        addChatRoom={ newChatRoom }\r\n                        deleteChatRoom={ removeChatRoom }\r\n                        toggleSidebar={ handleShowSidebar }\r\n                    />\r\n                </div>\r\n                <div className={ styles.mainContentGrid } style={ mainContentInlineStyles }>\r\n                    <MainContent \r\n                        newMessage={ newMessage }\r\n                        currentChatRoom={ props.currentChatRoom }\r\n                        currentChatRoomName={ props.currentChatRoomName }\r\n                        authUsername={ props.username }\r\n                        authUID={ props.userId }\r\n                        toggleSidebar={ handleShowSidebar }\r\n                        showSidebar={ props.showSidebar }\r\n                        setAuth={ handleAuthentication }\r\n                        showAlert={ handleNotification }                    \r\n                    />\r\n                </div> \r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Messenger);","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\containers\\Authentication\\LoginForm\\LoginForm.js",[],"E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\Alert\\Alert.js",[],"E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\Sidebar\\Sidebar.js",[],"E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\MainContent\\MainContent.js",[],"E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\MainContent\\Input\\Input.js",["120"],"import React, { useState } from 'react';\r\nimport styles from './Input.module.scss';\r\nimport DOMPurify from 'dompurify';\r\nlet oldTime = null;\r\n\r\nconst Input = props => {\r\n    let [userMessage, setUserMessage] = useState('');\r\n\r\n    return(\r\n        <div className={ styles.inputContainer }> \r\n            <textarea \r\n                aria-label=\"Type a messages and press enter to send. You can also send emoji.\" \r\n                spellCheck=\"true\" \r\n                placeholder=\"Press Enter to send Message\" \r\n                maxLength=\"1999\"\r\n                placeholder=\"Enter your message. Use our emojis by :smile:\"\r\n                className={ styles.input }\r\n                onChange={ e => {\r\n                    setUserMessage(DOMPurify.sanitize(e.target.value));\r\n                }}\r\n                onKeyDown={ e => {\r\n                    if(e.key === 'Enter') {\r\n                        if(props.currentChatRoomName && props.currentChatRoomName !== 'Unanimity') {\r\n                            if( oldTime === null ) {                                      \r\n                                oldTime = Date.now();\r\n                                oldTime -= 50000;                           \r\n                            }                       \r\n                            let currentTime = Date.now();                           \r\n                            if(currentTime >= (oldTime + 2000)) {                               \r\n                                    oldTime = currentTime;                                       \r\n                                    props.newMessage(userMessage);\r\n                                    e.target.value = ''; //makes the input box empty once newMessage gets the input                            \r\n                            } else {\r\n                                props.showAlert(\" Please wait two seconds before sending another message! \");\r\n                            }\r\n                        } else {\r\n                            props.showAlert(' Please select a chatroom before sending a message! ');                           \r\n                        }\r\n                    }\r\n                }}             \r\n            >\r\n            </textarea>       \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Input;","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\Sidebar\\addChatRoom\\addChatRoom.js",[],"E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\MainContent\\Chatroom\\Chatroom.js",[],"E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\MainContent\\Header\\Header.js",["121","122","123"],"import React, { Component, Fragment, useState } from 'react';\r\nimport styles from './Header.module.scss';\r\nimport Switch from 'react-switch';\r\nimport AccountSettings from './AccountSettings/AccountSettings';\r\n\r\nconst Header = props => {\r\n    const [openOptions, setOpenOptions] = useState(true);\r\n    const [options, setOptions] = useState(null);\r\n    const [lightTheme, setLightTheme] = useState(false);\r\n    const [showSettings, setShowSettings] = useState(false);\r\n\r\n    const toggleTheme = () => {\r\n        if(lightTheme) {\r\n            document.documentElement.style.setProperty(\"--main-bg\",\"#585d63\");\r\n            document.documentElement.style.setProperty(\"--main-text\",\"white\");\r\n            document.documentElement.style.setProperty(\"--off-text\",\"#f6f6f6\");\r\n            document.documentElement.style.setProperty(\"--light-accent-bg\",\"#2C2F33\");\r\n            document.documentElement.style.setProperty(\"--dark-accent-bg\",\"#23272A\");\r\n            document.documentElement.style.setProperty(\"--light-action\",\"white\");\r\n            document.documentElement.style.setProperty(\"--dark-action\",\"#d4d4d4\");\r\n        } else {\r\n            document.documentElement.style.setProperty(\"--main-bg\",\"white\");\r\n            document.documentElement.style.setProperty(\"--main-text\",\"black\");\r\n            document.documentElement.style.setProperty(\"--off-text\",\"#313639\");\r\n            document.documentElement.style.setProperty(\"--light-accent-bg\",\"#F6F6F6\");\r\n            document.documentElement.style.setProperty(\"--dark-accent-bg\",\"#e8e8e8\");\r\n            document.documentElement.style.setProperty(\"--light-action\",\"#365F88\");\r\n            document.documentElement.style.setProperty(\"--dark-action\",\"#05386B\");\r\n        }\r\n    }\r\n    \r\n    //shows & hides the options menu. triggered by the three dots in the top right of the header\r\n    const toggleOptions =  () => {\r\n        if(openOptions === true) {\r\n            setOptions(\r\n                <ul role=\"menu\" aria-label=\"option menu pop out\" className={ styles.optionsMenu }>\r\n                    <li role=\"menuitem\">\r\n                        <span>Theme: </span>\r\n                        <Switch aria-label=\"Switch to change theme color of Unanimity\" className={styles.switch} checked={lightTheme} onChange={() => { setLightTheme(!lightTheme);  setOptions(null)}} activeBoxShadow='0 0 2px 3px #365F88' onColor=\"#05386B\" uncheckedIcon={false} checkedIcon={false} />   \r\n                    </li>\r\n                    <li \r\n                        tabIndex=\"0\" \r\n                        role=\"button\"\r\n                        aria-label=\"Logout of unanimity\"\r\n                        style={ { color: '#f44336' } } \r\n                        onClick={ () => { props.logout(true) }  } \r\n                        onKeyDown={ e => { if(e.key === 'Enter') { props.logout(true); } } }\r\n                    >\r\n                        Logout\r\n                    </li>\r\n                    <li role=\"menuitem\">\r\n                        <a\r\n                        aria-label=\"click this link to go to account settings\"\r\n                        onClick={() => { setShowSettings(!showSettings); setOptions(null); }}\r\n                        >Account Settings</a>\r\n                    </li>                       \r\n                </ul>\r\n            );          \r\n        } else {\r\n            setOptions(null);\r\n        }\r\n        setOpenOptions(!openOptions);\r\n    }\r\n\r\n   /*\r\n        changes the sidebar opener between a x and a burger( the three lines ) \r\n        dose not cause the sidebar to open and close. sidebar open and close is handled in messenger.js\r\n    */\r\n    const toggleBurger = () => {\r\n        if( props.showSidebar ) {\r\n            //make the burger button a X\r\n            return(\r\n                <div \r\n                    tabIndex=\"0\" \r\n                    onClick={ () => { props.toggleSidebar(); } } \r\n                    onKeyDown={ e => { if(e.key === 'Enter') { props.toggleSidebar(); } } }\r\n                    className={ styles.close }\r\n                    aria-label=\" Close Sidebar button\"\r\n                    role=\"button\"                      \r\n                >\r\n                    <div className={ styles.closeTop }></div>\r\n                    <div className={ styles.closeMiddle }></div>\r\n                    <div className={ styles.closeBottom }></div>                      \r\n                </div>\r\n            );\r\n        } else {\r\n            //sidebar is closed show the burger (three lines) to open it.\r\n            return(\r\n                <div \r\n                    tabIndex=\"0\"\r\n                    onClick={ () => { props.toggleSidebar( ); } } \r\n                    onKeyDown={e => { if(e.key === 'Enter') { props.toggleSidebar(); } } }\r\n                    className={ styles.burger }  \r\n                    aria-label=\"Open Sidebar button\"\r\n                    role=\"button\"\r\n                >\r\n                    <div className={ styles.openTop }></div>\r\n                    <div className={ styles.openMiddle }></div>\r\n                    <div className={ styles.openBottom }></div>          \r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    const showSettingsMenu = () => {\r\n        if(showSettings) {\r\n            return <AccountSettings setShowSettings={setShowSettings} authUID={ props.authUID } setShowSettings={setShowSettings} showSettings={showSettings} authUsername={props.authUsername}/>;\r\n        }\r\n    }\r\n\r\n    toggleTheme();\r\n    let burger = toggleBurger();   \r\n    return(\r\n        <Fragment>\r\n            <header className={ styles.header }>              \r\n                { burger }\r\n                <h3>{ props.currentChatRoomName }</h3>\r\n                <div \r\n                    tabIndex=\"0\" \r\n                    className={ styles.options } \r\n                    onClick={ () => toggleOptions() }\r\n                    onKeyDown={ e => { if(e.key === 'Enter') { toggleOptions(); } } }\r\n                    aria-label=\"Open options menu button\"\r\n                    aria-haspopup=\"true\"\r\n                    role=\"button\"\r\n                >\r\n                    <div className={ styles.circle1 }></div>\r\n                    <div className={ styles.circle2 }></div>\r\n                    <div className={ styles.circle3 }></div>\r\n                </div>     \r\n            </header>\r\n            { options }  \r\n            { showSettingsMenu() }\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Header;","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\MainContent\\Chatroom\\Message\\Message.js",["124","125"],"import React from 'react';\r\nimport styles from './Message.module.scss';\r\nimport DOMPurify from 'dompurify';\r\nimport Emoji from \"react-emoji-render\";\r\n\r\nconst message = props => {\r\n    var messageStyle = null;\r\n    if(props.isSender) {\r\n        messageStyle = styles.senderMessage;\r\n    } else {\r\n        messageStyle = styles.recieverMessage;\r\n    }\r\n\r\n    let sanitizedMessage = props.currentMessage;\r\n    sanitizedMessage = sanitizedMessage.replace(/[^\\w\\s!?$&:,\\-\\(\\)]/g,'');\r\n    sanitizedMessage = DOMPurify.sanitize(sanitizedMessage);\r\n    let sanitizedName = props.senderName;\r\n    sanitizedName = sanitizedName.replace(/[^\\w\\s!?$]/g, '');\r\n    sanitizedName = DOMPurify.sanitize(sanitizedName);\r\n    \r\n    return (\r\n        <div className={ styles.messageContainer }>\r\n            <h3 className={ styles.userName }>{ sanitizedName }</h3>\r\n            <Emoji className={`${messageStyle} ${styles.message}`} text={sanitizedMessage} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default message;","E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\MainContent\\Header\\AccountSettings\\AccountSettings.js",[],"E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\MainContent\\Header\\AccountSettings\\UpdatePwdForm\\UpdatePwdForm.js",[],"E:\\ProgramFiles\\GithubRepository\\unanimity\\src\\components\\MainContent\\Header\\AccountSettings\\UpdateUsernameForm\\UpdateUsernameForm.js",["126"],"import React, { useState } from \"react\";\r\nimport styles from '../AccountSettings.module.scss';\r\nimport DOMPurify from 'dompurify';\r\nimport axios from '../../../../../axios';\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst UpdateUsernameForm = props => {\r\n\tlet [newUsername, setNewUsername] = useState('');\r\n\tlet [confirmUsername, setConfirmUsername] = useState('');\r\n    let [errors, setErrors] = useState('');\r\n\tlet [password, setPassword] = useState('');\r\n\r\n\t//call check password function from props. If the password is correct it updated the database with new username.\r\n\tconst handleUsernameSubmit = async e => {\r\n        e.preventDefault();\r\n        let sanitizedUsername;\r\n        let passwordCorrect = await props.checkPwd(password);\r\n        if(passwordCorrect) {      \r\n            //change username in users db\r\n            let oldUsername = await  axios.get('users/u' + props.authUID + '.json')\r\n            .catch(err => setErrors(`Failed to update username: ${err}`));\r\n            let updatedUsername = {...oldUsername.data};\r\n\t\t\t\r\n\t\t\tif(newUsername == confirmUsername) {\r\n\t\t\t\tupdatedUsername.userName = newUsername.toLowerCase();\r\n\t\t\t\tupdatedUsername.userName = DOMPurify.sanitize(updatedUsername.userName);\r\n\t\t\t\tupdatedUsername.userName.replace(/[^\\w]/g,'');\r\n\t\t\t\tsanitizedUsername = updatedUsername.userName;\r\n\t\t\t\taxios.put('users/u' + props.authUID + '.json', updatedUsername)\r\n\t\t\t\t.then(res => {\r\n\t\t\t\t\tconsole.log('username successfully changed!!')\r\n\t\t\t\t\tprops.setShowSettings(false);\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => setErrors(`Failed to update username in the database: ${err}`));\r\n\r\n\t\t\t\t//change username in userIDByUsername\r\n\t\t\t\tconst userIDByUsername = await axios.get('userIDByUsername.json');\r\n\t\t\t\tlet updatedUserIDByUsername = {...userIDByUsername.data};\r\n\t\t\t\tdelete updatedUserIDByUsername[props.authUsername];\r\n\t\t\t\t//add the new name with props.authUID as value\r\n\t\t\t\tupdatedUserIDByUsername[sanitizedUsername] = props.authUID;\r\n\t\t\t\t\r\n\t\t\t\taxios.put('userIDByUsername.json', updatedUserIDByUsername)\r\n\t\t\t\t.then(res => props.setShowSettings(false))\r\n\t\t\t\t.catch(err => setErrors(`Failed to update username by userID in the database: ${err}`));\r\n\t\t\t}\r\n        } else {\r\n            setErrors('Your password was incorrect.');\r\n\t\t}\t\r\n    }\r\n    \r\n\treturn(\r\n\t\t<div className={ styles.container }> \r\n\t\t\t<motion.div initial=\"hidden\" animate=\"visible\" variants={{\r\n\t\t\t\thidden: {\r\n\t\t\t\t\topacity: 0\r\n\t\t\t\t},\r\n\t\t\t\tvisible: {\r\n\t\t\t\t\topacity: 1,\r\n\t\t\t\t\tscale: 1\r\n\t\t\t\t}\r\n\t\t\t}}>\r\n\t\t\t\t<form onSubmit={ handleUsernameSubmit } className={ styles.form }>\r\n\t\t\t\t\t<legend>Update Your Username</legend>\r\n\t\t\t\t\t<label htmlFor=\"newUsername\">New Username</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tclassName={ styles.input } \r\n\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\tid=\"newUsername\" \r\n\t\t\t\t\t\tname=\"newUsername\" \r\n\t\t\t\t\t\tplaceholder=\"Enter your new username\"\r\n\t\t\t\t\t\taria-label=\"Enter your new username\"\r\n\t\t\t\t\t\tonChange={ e => setNewUsername(e.target.value) }\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<label htmlFor=\"confirmUsername\">Confirm Username</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tclassName={ styles.input } \r\n\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\tid=\"confirmUsername\" \r\n\t\t\t\t\t\tname=\"confirmUsername\" \r\n\t\t\t\t\t\tplaceholder=\"Confirm your new username\"\r\n\t\t\t\t\t\taria-label=\"confirm your new username\"\r\n\t\t\t\t\t\tonChange={ e => setConfirmUsername(e.target.value) }\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<label htmlFor=\"password\">Password</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tclassName={ styles.input } \r\n\t\t\t\t\t\ttype=\"password\" \r\n\t\t\t\t\t\tid=\"password\" \r\n\t\t\t\t\t\tname=\"password\" \r\n\t\t\t\t\t\tplaceholder=\"Enter your password\"\r\n\t\t\t\t\t\taria-label=\"enter your password for your account\"\r\n\t\t\t\t\t\tonChange={ e => setPassword(e.target.value) }\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<span role=\"alert\" aria-label=\"Errors with your form data will be displayed here.\">{errors}</span>\r\n\t\t\t\t\t<button aria-label=\"Click to proceeding updating your account username.\" className={ styles.submit }>Submit</button>\t\r\n\t\t\t\t</form>\t\r\n\t\t\t</motion.div>\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default UpdateUsernameForm;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",["127","128"],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":36,"column":8,"nodeType":"135","endLine":36,"endColumn":10,"suggestions":"136"},{"ruleId":"137","severity":1,"message":"138","line":45,"column":43,"nodeType":"139","messageId":"140","endLine":45,"endColumn":44,"suggestions":"141"},{"ruleId":"137","severity":1,"message":"138","line":45,"column":59,"nodeType":"139","messageId":"140","endLine":45,"endColumn":60,"suggestions":"142"},{"ruleId":"143","severity":1,"message":"144","line":27,"column":238,"nodeType":"145","endLine":27,"endColumn":253},{"ruleId":"137","severity":1,"message":"146","line":122,"column":126,"nodeType":"139","messageId":"140","endLine":122,"endColumn":127,"suggestions":"147"},{"ruleId":"137","severity":1,"message":"148","line":122,"column":128,"nodeType":"139","messageId":"140","endLine":122,"endColumn":129,"suggestions":"149"},{"ruleId":"150","severity":1,"message":"151","line":16,"column":17,"nodeType":"145","endLine":16,"endColumn":76},{"ruleId":"152","severity":1,"message":"153","line":1,"column":17,"nodeType":"154","messageId":"155","endLine":1,"endColumn":26},{"ruleId":"156","severity":1,"message":"157","line":52,"column":25,"nodeType":"158","endLine":55,"endColumn":26},{"ruleId":"150","severity":1,"message":"151","line":107,"column":97,"nodeType":"145","endLine":107,"endColumn":130},{"ruleId":"137","severity":1,"message":"146","line":15,"column":64,"nodeType":"139","messageId":"140","endLine":15,"endColumn":65,"suggestions":"159"},{"ruleId":"137","severity":1,"message":"148","line":15,"column":66,"nodeType":"139","messageId":"140","endLine":15,"endColumn":67,"suggestions":"160"},{"ruleId":"161","severity":1,"message":"162","line":24,"column":19,"nodeType":"163","messageId":"164","endLine":24,"endColumn":21},{"ruleId":"129","replacedBy":"165"},{"ruleId":"131","replacedBy":"166"},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["169"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["170","171"],["172","173"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","Unnecessary escape character: \\(.",["174","175"],"Unnecessary escape character: \\).",["176","177"],"react/jsx-no-duplicate-props","No duplicate props allowed","no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["178","179"],["180","181"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["167"],["168"],"no-global-assign","no-unsafe-negation",{"desc":"182","fix":"183"},{"messageId":"184","fix":"185","desc":"186"},{"messageId":"187","fix":"188","desc":"189"},{"messageId":"184","fix":"190","desc":"186"},{"messageId":"187","fix":"191","desc":"189"},{"messageId":"184","fix":"192","desc":"186"},{"messageId":"187","fix":"193","desc":"189"},{"messageId":"184","fix":"194","desc":"186"},{"messageId":"187","fix":"195","desc":"189"},{"messageId":"184","fix":"196","desc":"186"},{"messageId":"187","fix":"197","desc":"189"},{"messageId":"184","fix":"198","desc":"186"},{"messageId":"187","fix":"199","desc":"189"},"Update the dependencies array to be: [props]",{"range":"200","text":"201"},"removeEscape",{"range":"202","text":"203"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"204","text":"205"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"206","text":"203"},{"range":"207","text":"205"},{"range":"208","text":"203"},{"range":"209","text":"205"},{"range":"210","text":"203"},{"range":"211","text":"205"},{"range":"212","text":"203"},{"range":"213","text":"205"},{"range":"214","text":"203"},{"range":"215","text":"205"},[1306,1308],"[props]",[2699,2700],"",[2699,2699],"\\",[2715,2716],[2715,2715],[5534,5535],[5534,5534],[5536,5537],[5536,5536],[466,467],[466,466],[468,469],[468,468]]